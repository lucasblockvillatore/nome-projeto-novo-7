service: ${env:APP_NAME}
variablesResolutionMode: 20210326

frameworkVersion: '2'
configValidationMode: error

plugins:
  - serverless-python-requirements
  # https://www.serverless.com/plugins/serverless-offline/
  - serverless-offline
  # https://www.serverless.com/plugins/serverless-plugin-canary-deployments/
  - serverless-plugin-canary-deployments
  # https://www.serverless.com/plugins/serverless-plugin-resource-tagging/
  - serverless-plugin-resource-tagging
  # https://www.serverless.com/plugins/serverless-tag-cloud-watch-logs/
  - serverless-tag-cloud-watch-logs
  # https://www.serverless.com/plugins/serverless-wsgi
  - serverless-wsgi

provider:
  name: aws
  region: ${env:AWS_REGION}
  logRetentionInDays: ${env:LOG_RETENTION_IN_DAYS}
  lambdaHashingVersion: 20201221
  environment: ${ssm:/aws/reference/secretsmanager/${env:SECRETS_NAME}}
  apiGateway:
    shouldStartNameWithService: true
  deploymentBucket: ${env:LAMBDA_DEPLOYMENT_BUCKET}
  deploymentPrefix: ${self:service}
  stage: ${env:ENVIRONMENT_NAME}
  stackTags:
    App: "${env:APP_NAME}"
    Env: "${env:ENVIRONMENT_NAME}"
    Iac: "serverless-ci-IAC-VERSION"
    Repository: "${env:REPOSITORY_NAME}"

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  cloudWatchLogsTags:
    App: ${env:APP_NAME}
    Env: ${env:ENVIRONMENT_NAME}
    Iac: serverless-ci-IAC-VERSION
    Repository: ${env:REPOSITORY_NAME}

functions:
  app:
    handler: ${env:LAMBDA_HANDLER}
    name: ${env:APP_NAME}-${env:ENVIRONMENT_NAME}
    runtime: ${env:LAMBDA_RUNTIME}
    memorySize: ${env:LAMBDA_MEMORY_SIZE}
    timeout: ${env:LAMBDA_TIMEOUT}
    reservedConcurrency: 5
    role: ${env:LAMBDA_EXECUTION_ROLE_ARN}
    events:
      # index
      - http:
          method: GET
          path: /${env:APP_NAME}
          cors: true
      # event_v1
      - http:
          method: POST
          path: /${env:APP_NAME}/v1/event
          cors: true
      # event_v1
      - http:
          method: GET
          path: /${env:APP_NAME}/v1/event
          cors: true
      # alive
      - http:
          method: GET
          path: /${env:APP_NAME}/alive
          cors: true
      # favicon
      - http:
          method: GET
          path: /${env:APP_NAME}/favicon-32x32.png
          cors: true
      # favicon
      - http:
          method: GET
          path: /${env:APP_NAME}/favicon-16x16.png
          cors: true
      # docs
      - http:
          method: GET
          path: /${env:APP_NAME}/docs
          cors: true
      # openapi
      - http:
          method: GET
          path: /${env:APP_NAME}/openapi.yml
          cors: true
    deploymentSettings:
      type: ${env:LAMBDA_DEPLOYMENT_PREFERENCE_TYPE}
      alias: Live
    vpc:
      securityGroupIds:
        - ${env:LAMBDA_SECURITY_GROUP_ID}
      subnetIds:
        - ${env:SUBNET_ID_0}
        - ${env:SUBNET_ID_1}
    environment:
      APP_ENV: ${env:ENVIRONMENT_NAME}
      DEBUG: true
      LOG_LEVEL: error
      REGION_NAME: ${env:AWS_REGION}
